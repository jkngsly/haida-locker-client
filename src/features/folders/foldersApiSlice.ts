// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import FolderApiResponse from "./interfaces/Folder.interface"

interface GetFoldersParams {
  parentId?: string
  limit?: number
}

// Define a service using a base URL and expected endpoints
export const foldersApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: 'http://localhost:4000',
    prepareHeaders(headers) {
        //headers.set('x-api-key', DOGS_API_KEY);
        return headers;
    },
  }),
  reducerPath: "foldersAPI",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Folders"],
  endpoints: build => ({
    getFolders: build.query<FolderApiResponse, GetFoldersParams>({
      query: ({ parentId, limit }) => {
        let queryString = `folders`;

        const params: string[] = [];
        if (parentId) params.push(`id=${id}`);
        if (limit) params.push(`limit=${limit}`);

        if (params.length > 0) {
          queryString += `?${params.join('&')}`;
        }

        return queryString;
      },
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, { parentId, limit }) => [
        {
          type: "Folders",
          id: `${parentId || ''}_${limit || ''}`, // Generate a unique string ID
        }
      ],
    }),

      // Get root folders (no parentId needed)
      getRootFolders: build.query<FolderApiResponse, void>({
        query: () => 'folders',
        providesTags: ['Folders'], // This tag will cache the root folder list
      }),
      
      // Get child folders by parentId
      getChildFolders: build.query<FolderApiResponse, { parentId: string }>({
        query: ({ parentId }) => `folders?id=${parentId}`,
        providesTags: (result, error, { parentId }) => [
          { type: 'Folders', id: parentId }, // Unique tag for each parentId
        ],
      }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetFoldersQuery, useGetChildFoldersQuery, useGetRootFoldersQuery } = foldersApiSlice
